// <auto-generated />
using System;
using Api.Domain.Implementations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(PostgreDatabaseContext))]
    partial class PostgreDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Domain.Entities.Contracts.Contract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<int>("ContractStatus")
                        .HasColumnType("integer");

                    b.Property<long>("ContracteeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContracteeServiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContractorId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("EditControl")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Price")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContracteeId");

                    b.HasIndex("ContractorId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("Api.Domain.Entities.Contracts.ContractDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ContractDetailType")
                        .HasColumnType("integer");

                    b.Property<long?>("ContractId")
                        .HasColumnType("bigint");

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<Guid?>("EditControl")
                        .HasColumnType("uuid");

                    b.Property<int>("StakeholderType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractDetail");
                });

            modelBuilder.Entity("Api.Domain.Entities.Countrys.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<Guid?>("EditControl")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Api.Domain.Entities.Countrys.CountryObligations", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("EditControl")
                        .HasColumnType("uuid");

                    b.Property<int>("PersonDetailType")
                        .HasColumnType("integer");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryObligations");
                });

            modelBuilder.Entity("Api.Domain.Entities.Persons.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("EditControl")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PersonType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("RegisterDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Api.Domain.Entities.Persons.PersonDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<Guid?>("EditControl")
                        .HasColumnType("uuid");

                    b.Property<int>("PersonDetailType")
                        .HasColumnType("integer");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonDetail");
                });

            modelBuilder.Entity("Api.Domain.Entities.Schedulings.Scheduling", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<long?>("ContractId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContracteeId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("EditControl")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("ContracteeId");

                    b.ToTable("Scheduling");
                });

            modelBuilder.Entity("Api.Domain.Entities.Schedulings.SchedulingDate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContracteeId")
                        .HasColumnType("bigint");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<Guid?>("EditControl")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContracteeId");

                    b.ToTable("SchedulingDate");
                });

            modelBuilder.Entity("Api.Domain.Entities.Services.ContracteeServiceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContracteeServiceProvideId")
                        .HasColumnType("bigint");

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<Guid?>("EditControl")
                        .HasColumnType("uuid");

                    b.Property<int>("ServiceDetailType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContracteeServiceProvideId");

                    b.ToTable("ContracteeServiceDetail");
                });

            modelBuilder.Entity("Api.Domain.Entities.Services.ContracteeServiceProvide", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<long>("ContracteeId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("EditControl")
                        .HasColumnType("uuid");

                    b.Property<string>("Metric")
                        .HasColumnType("text");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ContracteeServiceProvide");
                });

            modelBuilder.Entity("Api.Domain.Entities.Services.ServiceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("EditControl")
                        .HasColumnType("uuid");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServiceType");
                });

            modelBuilder.Entity("Api.Domain.Entities.Stakeholders.Contractee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("EditControl")
                        .HasColumnType("uuid");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("numeric");

                    b.Property<int>("WorksCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Contractee");
                });

            modelBuilder.Entity("Api.Domain.Entities.Stakeholders.Contractor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("EditControl")
                        .HasColumnType("uuid");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("numeric");

                    b.Property<int>("RequestsCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Contractor");
                });

            modelBuilder.Entity("Api.Domain.Entities.Contracts.Contract", b =>
                {
                    b.HasOne("Api.Domain.Entities.Stakeholders.Contractee", null)
                        .WithMany()
                        .HasForeignKey("ContracteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.Stakeholders.Contractor", null)
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.Contracts.ContractDetail", b =>
                {
                    b.HasOne("Api.Domain.Entities.Contracts.Contract", null)
                        .WithMany("ContractDetails")
                        .HasForeignKey("ContractId");
                });

            modelBuilder.Entity("Api.Domain.Entities.Countrys.CountryObligations", b =>
                {
                    b.HasOne("Api.Domain.Entities.Countrys.Country", null)
                        .WithMany("CountryObligations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.Persons.PersonDetail", b =>
                {
                    b.HasOne("Api.Domain.Entities.Persons.Person", null)
                        .WithMany("PersonDetails")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.Schedulings.Scheduling", b =>
                {
                    b.HasOne("Api.Domain.Entities.Contracts.Contract", null)
                        .WithMany("Schedulings")
                        .HasForeignKey("ContractId");

                    b.HasOne("Api.Domain.Entities.Stakeholders.Contractee", null)
                        .WithMany("Schedulings")
                        .HasForeignKey("ContracteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.Schedulings.SchedulingDate", b =>
                {
                    b.HasOne("Api.Domain.Entities.Stakeholders.Contractee", null)
                        .WithMany("SchedulingDates")
                        .HasForeignKey("ContracteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.Services.ContracteeServiceDetail", b =>
                {
                    b.HasOne("Api.Domain.Entities.Services.ContracteeServiceProvide", null)
                        .WithMany("ContracteeServiceDetails")
                        .HasForeignKey("ContracteeServiceProvideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.Services.ContracteeServiceProvide", b =>
                {
                    b.HasOne("Api.Domain.Entities.Services.ServiceType", null)
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.Stakeholders.Contractee", b =>
                {
                    b.HasOne("Api.Domain.Entities.Persons.Person", null)
                        .WithOne()
                        .HasForeignKey("Api.Domain.Entities.Stakeholders.Contractee", "PersonId");
                });

            modelBuilder.Entity("Api.Domain.Entities.Stakeholders.Contractor", b =>
                {
                    b.HasOne("Api.Domain.Entities.Persons.Person", null)
                        .WithOne()
                        .HasForeignKey("Api.Domain.Entities.Stakeholders.Contractor", "PersonId");
                });

            modelBuilder.Entity("Api.Domain.Entities.Contracts.Contract", b =>
                {
                    b.Navigation("ContractDetails");

                    b.Navigation("Schedulings");
                });

            modelBuilder.Entity("Api.Domain.Entities.Countrys.Country", b =>
                {
                    b.Navigation("CountryObligations");
                });

            modelBuilder.Entity("Api.Domain.Entities.Persons.Person", b =>
                {
                    b.Navigation("PersonDetails");
                });

            modelBuilder.Entity("Api.Domain.Entities.Services.ContracteeServiceProvide", b =>
                {
                    b.Navigation("ContracteeServiceDetails");
                });

            modelBuilder.Entity("Api.Domain.Entities.Stakeholders.Contractee", b =>
                {
                    b.Navigation("SchedulingDates");

                    b.Navigation("Schedulings");
                });
#pragma warning restore 612, 618
        }
    }
}
